import pytest
from torch import Tensor, equal
import numpy as np

from pythia.agent.predictor import LinearPredictor


def test_check_base_params():
    lp = LinearPredictor.initialise(1, 1, {})

    assert lp.weight_decay == 0.0
    assert lp.learning_rate == 1e-3
    assert lp.epochs == 100

def test_check_weights():
    lp = LinearPredictor.initialise(1, 1, {"learning_rate": 0.01, "epochs": 2500})

    X_train = np.array([[0.0], [1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0], [0.0]])
    y_train = np.array([[0.0], [0.0], [2.0], [4.0], [6.0], [8.0], [10.0], [12.0], [14.0], [16.0], [18.0], [20.0]])
    lp.fit(X_train, y_train)

    assert lp.model.linear.weight.item() == pytest.approx(2.0, abs=0.1, rel=0.1)

def test_check_biases():
    lp = LinearPredictor.initialise(1, 1, {"learning_rate": 0.01, "epochs": 3000})

    X_train = np.array([[0.0], [1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0], [0.0]])
    y_train = np.array([[0.0], [0.0], [2.0], [4.0], [6.0], [8.0], [10.0], [12.0], [14.0], [16.0], [18.0], [20.0]])
    lp.fit(X_train, y_train)

    assert lp.model.linear.bias.item() == pytest.approx(0.0, abs=0.2, rel=0.2)

def test_smoke_two_dim():
    lp = LinearPredictor.initialise(2, 2, {"learning_rate": 0.01, "epochs": 3000})

    X_train = np.array([[0.0, 1.5], [1.0, 1.5], [2.0, 1.5], [3.0, 1.5], [4.0, 1], [5.0, 1], [6.0, 1], [7.0, 1], [8.0, 1], [9.0, 1], [10.0, 1], [0.0, 1.5]])
    Y_train = np.array([[0.0, 0.0], [0.0, 0.0], [2.0, 0.0], [4.0, 0.1], [6.0, 0.1], [8.0, 0.1], [10.0, 0.1], [12.0, 0.1], [14.0, 0.1], [16.0, 0.1], [18.0, 0.1], [20.0, 0.1]])
    lp.fit(X_train, Y_train)

    assert True

def test_window_1():
    lp_price = LinearPredictor.initialise(1, 1, {"learning_rate": 0.01, "epochs": 3000, "window_size": 1})

    X_train = Tensor([[0.53], [0.22], [0.44], [0.57], [0.47], [0.43], [0.36], [0.04], [0.09], [0.58], [0.93], [0.63], [0.49], [0.68], [0.39], [0.32], [0.61], [0.85], [0.29], [0.02], [0.47], [0.54], [0.28], [0.32]])
    Y_train = Tensor([[0.100388305], [0.174490529], [0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])

    X, Y_price = lp_price._LinearPredictor__reshape_window(X_train, Y_train)

    Y_price_expected = Tensor([[0.100388305], [0.174490529], [0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])

    assert equal(Y_price, Y_price_expected)

def test_window_2():
    lp_price = LinearPredictor.initialise(2, 1, {"learning_rate": 0.01, "epochs": 3000, "window_size": 2})

    X_train = Tensor([[0.53], [0.22], [0.44], [0.57], [0.47], [0.43], [0.36], [0.04], [0.09], [0.58], [0.93], [0.63], [0.49], [0.68], [0.39], [0.32], [0.61], [0.85], [0.29], [0.02], [0.47], [0.54], [0.28]])
    Y_train = Tensor([[0.174490529], [0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])

    X, Y_price = lp_price._LinearPredictor__reshape_window(X_train, Y_train)

    Y_price_expected = Tensor([[0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])
    X_expected = Tensor([[0.53,0.22], [0.22,0.44], [0.44,0.57], [0.57,0.47], [0.47,0.43], [0.43,0.36], [0.36,0.04], [0.04,0.09], [0.09,0.58], [0.58,0.93], [0.93,0.63], [0.63,0.49], [0.49,0.68], [0.68,0.39], [0.39,0.32], [0.32,0.61], [0.61,0.85], [0.85,0.29], [0.29,0.02], [0.02,0.47], [0.47,0.54], [0.54,0.28]])
    
    assert equal(Y_price, Y_price_expected)
    assert equal(X, X_expected)

def test_window_5():
    lp_price = LinearPredictor.initialise(5, 1, {"learning_rate": 0.01, "epochs": 3000, "window_size": 5})

    X_train = Tensor([[0.53], [0.22], [0.44], [0.57], [0.47], [0.43], [0.36], [0.04], [0.09], [0.58], [0.93], [0.63], [0.49], [0.68], [0.39], [0.32], [0.61], [0.85], [0.29], [0.02], [0.47], [0.54], [0.28]])
    Y_train = Tensor([[0.174490529], [0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])

    X, Y_price = lp_price._LinearPredictor__reshape_window(X_train, Y_train)

    Y_price_expected = Tensor([[0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])
    X_expected = Tensor([[0.53,0.22,0.44,0.57,0.47], [0.22,0.44,0.57,0.47,0.43], [0.44,0.57,0.47,0.43,0.36], [0.57,0.47,0.43,0.36,0.04], [0.47,0.43,0.36,0.04,0.09], [0.43,0.36,0.04,0.09,0.58], [0.36,0.04,0.09,0.58,0.93], [0.04,0.09,0.58,0.93,0.63], [0.09,0.58,0.93,0.63,0.49], [0.58,0.93,0.63,0.49,0.68], [0.93,0.63,0.49,0.68,0.39], [0.63,0.49,0.68,0.39,0.32], [0.49,0.68,0.39,0.32,0.61], [0.68,0.39,0.32,0.61,0.85], [0.39,0.32,0.61,0.85,0.29], [0.32,0.61,0.85,0.29,0.02], [0.61,0.85,0.29,0.02,0.47], [0.85,0.29,0.02,0.47,0.54], [0.29,0.02,0.47,0.54,0.28]])

    assert equal(Y_price, Y_price_expected)
    assert equal(X, X_expected)

def test_smoke_5():
    lp_price = LinearPredictor.initialise(5, 1, {"learning_rate": 0.01, "epochs": 3000, "window_size": 5})
    lp_returns = LinearPredictor.initialise(5, 1, {"learning_rate": 0.01, "epochs": 3000, "window_size": 5, "predict_returns": True})

    X_train = np.array([[0.53], [0.22], [0.44], [0.57], [0.47], [0.43], [0.36], [0.04], [0.09], [0.58], [0.93], [0.63], [0.49], [0.68], [0.39], [0.32], [0.61], [0.85], [0.29], [0.02], [0.47], [0.54], [0.28], [0.32]])
    Y_train = np.array([[0.100388305], [0.174490529], [0.754831322], [0.961275766], [0.323112539], [0.102608076], [0.125332736], [0.938113482], [0.536060491], [0.291566428], [0.930730193], [0.798851064], [0.229472516], [0.548998055], [0.270010339], [0.292953251], [0.71628985], [0.760392164], [0.953676547], [0.77314257], [0.975824303], [0.361572677], [0.846460368], [0.922462471]])

    lp_price.fit(X_train, Y_train)
    lp_returns.fit(X_train, Y_train)

  
    assert True